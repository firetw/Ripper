//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.17929.
// 
#pragma warning disable 1591

namespace ConsoleApplication1.FetionWebService {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="fetion_mathine_serverSoap", Namespace="http://tempuri.org/")]
    public partial class fetion_mathine_server : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback isAliveOperationCompleted;
        
        private System.Threading.SendOrPostCallback CollectNeConfigInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback CollectNeConfigInfo2OperationCompleted;
        
        private System.Threading.SendOrPostCallback CollectNeConfigInfoParserOperationCompleted;
        
        private System.Threading.SendOrPostCallback testOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public fetion_mathine_server() {
            this.Url = global::ConsoleApplication1.Properties.Settings.Default.ConsoleApplication1_FetionWebService_fetion_mathine_server;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event isAliveCompletedEventHandler isAliveCompleted;
        
        /// <remarks/>
        public event CollectNeConfigInfoCompletedEventHandler CollectNeConfigInfoCompleted;
        
        /// <remarks/>
        public event CollectNeConfigInfo2CompletedEventHandler CollectNeConfigInfo2Completed;
        
        /// <remarks/>
        public event CollectNeConfigInfoParserCompletedEventHandler CollectNeConfigInfoParserCompleted;
        
        /// <remarks/>
        public event testCompletedEventHandler testCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/isAlive", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string isAlive() {
            object[] results = this.Invoke("isAlive", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void isAliveAsync() {
            this.isAliveAsync(null);
        }
        
        /// <remarks/>
        public void isAliveAsync(object userState) {
            if ((this.isAliveOperationCompleted == null)) {
                this.isAliveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnisAliveOperationCompleted);
            }
            this.InvokeAsync("isAlive", new object[0], this.isAliveOperationCompleted, userState);
        }
        
        private void OnisAliveOperationCompleted(object arg) {
            if ((this.isAliveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.isAliveCompleted(this, new isAliveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CollectNeConfigInfo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CollectNeConfigInfo(string keyword, string neName, string unitName, string object_class, string ccUser, string ccPwd) {
            object[] results = this.Invoke("CollectNeConfigInfo", new object[] {
                        keyword,
                        neName,
                        unitName,
                        object_class,
                        ccUser,
                        ccPwd});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CollectNeConfigInfoAsync(string keyword, string neName, string unitName, string object_class, string ccUser, string ccPwd) {
            this.CollectNeConfigInfoAsync(keyword, neName, unitName, object_class, ccUser, ccPwd, null);
        }
        
        /// <remarks/>
        public void CollectNeConfigInfoAsync(string keyword, string neName, string unitName, string object_class, string ccUser, string ccPwd, object userState) {
            if ((this.CollectNeConfigInfoOperationCompleted == null)) {
                this.CollectNeConfigInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCollectNeConfigInfoOperationCompleted);
            }
            this.InvokeAsync("CollectNeConfigInfo", new object[] {
                        keyword,
                        neName,
                        unitName,
                        object_class,
                        ccUser,
                        ccPwd}, this.CollectNeConfigInfoOperationCompleted, userState);
        }
        
        private void OnCollectNeConfigInfoOperationCompleted(object arg) {
            if ((this.CollectNeConfigInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CollectNeConfigInfoCompleted(this, new CollectNeConfigInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CollectNeConfigInfo2", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CollectNeConfigInfo2(string keyword, string neName, string unitName, string Param3, string object_class, string ccUser, string ccPwd) {
            object[] results = this.Invoke("CollectNeConfigInfo2", new object[] {
                        keyword,
                        neName,
                        unitName,
                        Param3,
                        object_class,
                        ccUser,
                        ccPwd});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CollectNeConfigInfo2Async(string keyword, string neName, string unitName, string Param3, string object_class, string ccUser, string ccPwd) {
            this.CollectNeConfigInfo2Async(keyword, neName, unitName, Param3, object_class, ccUser, ccPwd, null);
        }
        
        /// <remarks/>
        public void CollectNeConfigInfo2Async(string keyword, string neName, string unitName, string Param3, string object_class, string ccUser, string ccPwd, object userState) {
            if ((this.CollectNeConfigInfo2OperationCompleted == null)) {
                this.CollectNeConfigInfo2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnCollectNeConfigInfo2OperationCompleted);
            }
            this.InvokeAsync("CollectNeConfigInfo2", new object[] {
                        keyword,
                        neName,
                        unitName,
                        Param3,
                        object_class,
                        ccUser,
                        ccPwd}, this.CollectNeConfigInfo2OperationCompleted, userState);
        }
        
        private void OnCollectNeConfigInfo2OperationCompleted(object arg) {
            if ((this.CollectNeConfigInfo2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CollectNeConfigInfo2Completed(this, new CollectNeConfigInfo2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CollectNeConfigInfoParser", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CollectNeConfigInfoParser(string keyword, string neName, string unitName, string Param3, string object_class, string ccUser, string ccPwd) {
            object[] results = this.Invoke("CollectNeConfigInfoParser", new object[] {
                        keyword,
                        neName,
                        unitName,
                        Param3,
                        object_class,
                        ccUser,
                        ccPwd});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CollectNeConfigInfoParserAsync(string keyword, string neName, string unitName, string Param3, string object_class, string ccUser, string ccPwd) {
            this.CollectNeConfigInfoParserAsync(keyword, neName, unitName, Param3, object_class, ccUser, ccPwd, null);
        }
        
        /// <remarks/>
        public void CollectNeConfigInfoParserAsync(string keyword, string neName, string unitName, string Param3, string object_class, string ccUser, string ccPwd, object userState) {
            if ((this.CollectNeConfigInfoParserOperationCompleted == null)) {
                this.CollectNeConfigInfoParserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCollectNeConfigInfoParserOperationCompleted);
            }
            this.InvokeAsync("CollectNeConfigInfoParser", new object[] {
                        keyword,
                        neName,
                        unitName,
                        Param3,
                        object_class,
                        ccUser,
                        ccPwd}, this.CollectNeConfigInfoParserOperationCompleted, userState);
        }
        
        private void OnCollectNeConfigInfoParserOperationCompleted(object arg) {
            if ((this.CollectNeConfigInfoParserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CollectNeConfigInfoParserCompleted(this, new CollectNeConfigInfoParserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/test", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string test() {
            object[] results = this.Invoke("test", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void testAsync() {
            this.testAsync(null);
        }
        
        /// <remarks/>
        public void testAsync(object userState) {
            if ((this.testOperationCompleted == null)) {
                this.testOperationCompleted = new System.Threading.SendOrPostCallback(this.OntestOperationCompleted);
            }
            this.InvokeAsync("test", new object[0], this.testOperationCompleted, userState);
        }
        
        private void OntestOperationCompleted(object arg) {
            if ((this.testCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.testCompleted(this, new testCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void isAliveCompletedEventHandler(object sender, isAliveCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class isAliveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal isAliveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void CollectNeConfigInfoCompletedEventHandler(object sender, CollectNeConfigInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CollectNeConfigInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CollectNeConfigInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void CollectNeConfigInfo2CompletedEventHandler(object sender, CollectNeConfigInfo2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CollectNeConfigInfo2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CollectNeConfigInfo2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void CollectNeConfigInfoParserCompletedEventHandler(object sender, CollectNeConfigInfoParserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CollectNeConfigInfoParserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CollectNeConfigInfoParserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void testCompletedEventHandler(object sender, testCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class testCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal testCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591